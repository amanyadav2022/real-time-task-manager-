class Task:
    def __init__(self, task_id, description, priority):
        self.task_id = task_id
        self.description = description
        self.priority = priority

class TaskManager:
    def __init__(self):
        self.tasks = []

    def add_task(self, task):
        self.tasks.append(task)

    def remove_task(self, task_id):
        self.tasks = [task for task in self.tasks if task.task_id != task_id]

    def get_tasks(self):
        return self.tasks

    def prioritize_tasks(self):
        self.tasks.sort(key=lambda x: x.priority, reverse=True)

def main():
    task_manager = TaskManager()

    # Adding tasks
    task_manager.add_task(Task(1, "Implement feature X", 2))
    task_manager.add_task(Task(2, "Fix bug in module Y", 1))
    task_manager.add_task(Task(3, "Refactor code in module Z", 3))

    # Displaying tasks
    print("Tasks:")
    for task in task_manager.get_tasks():
        print(f"Task ID: {task.task_id}, Description: {task.description}, Priority: {task.priority}")

    # Removing a task
    task_manager.remove_task(2)

    # Displaying tasks after removal
    print("\nTasks after removal:")
    for task in task_manager.get_tasks():
        print(f"Task ID: {task.task_id}, Description: {task.description}, Priority: {task.priority}")

    # Prioritizing tasks
    task_manager.prioritize_tasks()

    # Displaying tasks after prioritization
    print("\nTasks after prioritization:")
    for task in task_manager.get_tasks():
        print(f"Task ID: {task.task_id}, Description: {task.description}, Priority: {task.priority}")

if __name__ == "__main__":
    main()
